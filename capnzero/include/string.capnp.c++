// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: string.capnp

#include "string.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<32> b_8540e769171ac536 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54, 197,  26,  23, 105, 231,  64, 133,
     13,   0,   0,   0,   1,   0,   0,   0,
    104,   6,  81, 213,  84,  60, 105, 217,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 105, 110, 103,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 114,
    105, 110, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 114, 105, 110, 103,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8540e769171ac536 = b_8540e769171ac536.words;
#if !CAPNP_LITE
static const uint16_t m_8540e769171ac536[] = {0};
static const uint16_t i_8540e769171ac536[] = {0};
const ::capnp::_::RawSchema s_8540e769171ac536 = {
  0x8540e769171ac536, b_8540e769171ac536.words, 32, nullptr, m_8540e769171ac536,
  0, 1, i_8540e769171ac536, nullptr, nullptr, { &s_8540e769171ac536, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace capnzero {

// String
constexpr uint16_t String::_capnpPrivate::dataWordSize;
constexpr uint16_t String::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind String::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* String::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace

